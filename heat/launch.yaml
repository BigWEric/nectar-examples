HeatTemplateFormatVersion: '2012-12-12'


Description: 'Template to install the application on a NeCTAR instance'


Parameters:

  KeyName:
    Description: Name of an existing KeyPair to enable SSH access to the instances
    Type: String

  InstanceType:
    Description: The NeCTAR flavour the webserver is to run on
    Type: String
    Default: m1.small
    AllowedValues: [m1.small, m1.medium, m1.large, m1.xlarge, m1.xxlarge]
    ConstraintDescription: must be a valid NeCTAR flavour.

  AvailabilityZone:
    Type: String
    Description: The NeCTAR zone in which the VM is to run (must have block storage)
    Default: melbourne-np
    AllowedValues: [melbourne-qh2, melbourne-np, monash, qld]

  ImageName:
    Type: String
    Description: Name of the image to use for the instance to be created
    Default: 'NeCTAR Ubuntu 14.04 (Trusty) amd64'
    AllowedValues: ['NeCTAR Ubuntu 13.10 (Saucy) amd64', 'NeCTAR Ubuntu 14.04 (Trusty) amd64']

Mappings:

  InstanceId:
   'NeCTAR Ubuntu 13.10 (Saucy) amd64': {ImageId: a6dcb912-8307-4d35-861f-3e41ce994666}
   'NeCTAR Ubuntu 14.04 (Trusty) amd64': {ImageId: 563219b9-7d1d-44b4-a6b5-37f351799bc9}


Resources:

  # Needs a security group running on port 8080 to access it
  # Remember creating a security group does eat into the number of groups that you are limited to (10)
  AlertsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable ping, HTTP access via port 8080 and SSH access"
      SecurityGroupIngress:
        -
          IpProtocol: "icmp"
          FromPort: "-1"
          ToPort: "-1"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "8080"
          ToPort: "8080"
          CidrIp: "0.0.0.0/0"
        -
          IpProtocol: "tcp"
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"

  CinderVolume:
    Type: OS::Cinder::Volume
    Properties:
      # small, but this is just a demo
      size: "3"
      availability_zone: { Ref: AvailabilityZone }

  DiskTesterMachine:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: { Ref: AvailabilityZone }
      ImageId:
        Fn::FindInMap:
        - InstanceId
        - {Ref: ImageName}
        - ImageId
      InstanceType: {Ref: InstanceType}
      KeyName: {Ref: KeyName}
      SecurityGroups: [{Ref: AlertsSecurityGroup}]
      UserData: |
        #!/bin/bash -v
        apt-get update && sudo apt-get -y upgrade

        mkdir /transient
        mount /dev/vdb /transient

        echo -e "o\nn\np\n1\n\n\nw" | fdisk /dev/vdc
        mkfs.ext4 /dev/vdc1
        mkdir /block
        mount /dev/vdc1 /block

        apt-get -y install git

        # time to sit back and smoke that cigar...
        apt-get -y install maven

        # then java 8
        apt-get -y install python-software-properties

        add-apt-repository ppa:webupd8team/java -y
        apt-get -q -y update

        # from http://askubuntu.com/questions/190582/installing-java-automatically-with-silent-option
        echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections
        echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections

        apt-get install oracle-java8-installer -y

        # set it as the default..
        apt-get install oracle-java8-set-default

        git clone https://github.com/MartinPaulo/SparkDiskTester.git
        cd SparkDiskTester
        ./start.sh

  VolumeAttachment:
    Type: OS::Cinder::VolumeAttachment
    Properties:
      volume_id: { Ref: CinderVolume }
      instance_uuid: { Ref: DiskTesterMachine }
      mountpoint: /dev/vdc

Outputs:

  WebsiteURL:
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt: [DiskTesterMachine, PublicIp]
        - :8080/
    Description: URL for disktester server